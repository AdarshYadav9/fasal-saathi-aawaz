import React from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { 
  MessageCircle, 
  Camera, 
  Lightbulb, 
  Bug, 
  TrendingUp, 
  Sun, 
  Cloud, 
  CloudRain,
  Thermometer,
  Droplets,
  Wind,
  Eye,
  Download,
  Share2,
  HelpCircle,
  Star,
  AlertTriangle,
  Mic,
  Volume2,
  MapPin,
  Calendar,
  Clock,
  Heart,
  Award,
  Users
} from 'lucide-react'

interface DashboardProps {
  language: string
  onNavigate: (view: string) => void
  user?: any
  onVoiceInput?: () => void
  onTextToSpeech?: () => void
}

export const Dashboard = ({ language, onNavigate, user, onVoiceInput, onTextToSpeech }: DashboardProps) => {
  const translations = {
    en: {
      welcome: 'Welcome to Smart Crop Advisory',
      subtitle: 'Your AI-powered farming companion for better crop decisions',
      quickActions: 'Quick Actions',
      todaysWeather: "Today's Weather",
      weatherForecast: '3-Day Forecast',
      recentUpdates: 'Recent Updates',
      getStarted: 'Get Started',
      askAI: 'Ask AI Assistant',
      getCropAdvice: 'Get Crop Advice',
      detectPests: 'Detect Pests',
      checkPrices: 'Check Market Prices',
      uploadSoil: 'Upload Soil Photo',
      weatherLocation: 'New Delhi, India',
      temperature: '28┬░C',
      condition: 'Partly Cloudy',
      humidity: 'Humidity: 65%',
      rainfall: 'Rainfall: 2mm',
      windSpeed: 'Wind: 12 km/h',
      help: 'Help',
      successStories: 'Success Stories',
      voiceInput: 'Voice Input',
      textToSpeech: 'Text to Speech',
      criticalAlert: 'Critical Alert',
      weatherAlert: 'Heavy rain expected in 2 days',
      updates: [
        { type: 'price', icon: 'ЁЯУИ', text: 'Market prices updated for wheat and rice', color: 'bg-green-100 border-green-300' },
        { type: 'pest', icon: 'ЁЯРЫ', text: 'New pest alert: Watch for aphids in mustard crops', color: 'bg-red-100 border-red-300' },
        { type: 'crop', icon: 'ЁЯМ▒', text: 'Crop recommendation: Perfect time for rice planting', color: 'bg-blue-100 border-blue-300' },
        { type: 'weather', icon: 'ЁЯМж', text: 'Weather forecast: Good week for sowing season', color: 'bg-yellow-100 border-yellow-300' }
      ],
      testimonials: [
        { name: 'Rajesh Kumar', location: 'Punjab', story: 'Increased my wheat yield by 30% using AI advice', rating: 5 },
        { name: 'Priya Sharma', location: 'Haryana', story: 'Saved тВ╣50,000 on pesticides with smart detection', rating: 5 }
      ]
    },
    hi: {
      welcome: 'рд╕реНрдорд╛рд░реНрдЯ рдлрд╕рд▓ рд╕рд▓рд╛рд╣рдХрд╛рд░ рдореЗрдВ рд╕реНрд╡рд╛рдЧрдд рд╣реИ',
      subtitle: 'рдмреЗрд╣рддрд░ рдлрд╕рд▓ рдирд┐рд░реНрдгрдпреЛрдВ рдХреЗ рд▓рд┐рдП рдЖрдкрдХрд╛ AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдХреГрд╖рд┐ рд╕рд╛рдереА',
      quickActions: 'рддреНрд╡рд░рд┐рдд рдХрд╛рд░реНрдп',
      todaysWeather: 'рдЖрдЬ рдХрд╛ рдореМрд╕рдо',
      weatherForecast: '3-рджрд┐рди рдХрд╛ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди',
      recentUpdates: 'рд╣рд╛рд▓ рдХреА рдЕрдкрдбреЗрдЯ',
      getStarted: 'рд╢реБрд░реВ рдХрд░реЗрдВ',
      askAI: 'AI рд╕рд╣рд╛рдпрдХ рд╕реЗ рдкреВрдЫреЗрдВ',
      getCropAdvice: 'рдлрд╕рд▓ рд╕рд▓рд╛рд╣ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
      detectPests: 'рдХреАрдЯ рдкрд╣рдЪрд╛рдиреЗрдВ',
      checkPrices: 'рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ рджреЗрдЦреЗрдВ',
      uploadSoil: 'рдорд┐рдЯреНрдЯреА рдХреА рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
      weatherLocation: 'рдирдИ рджрд┐рд▓реНрд▓реА, рднрд╛рд░рдд',
      temperature: '28┬░C',
      condition: 'рдЖрдВрд╢рд┐рдХ рдмрд╛рджрд▓',
      humidity: 'рдирдореА: 65%',
      rainfall: 'рдмрд╛рд░рд┐рд╢: 2mm',
      windSpeed: 'рд╣рд╡рд╛: 12 рдХрд┐рдореА/рдШрдВрдЯрд╛',
      help: 'рд╕рд╣рд╛рдпрддрд╛',
      successStories: 'рд╕рдлрд▓рддрд╛ рдХреА рдХрд╣рд╛рдирд┐рдпрд╛рдВ',
      voiceInput: 'рдЖрд╡рд╛рдЬ рдЗрдирдкреБрдЯ',
      textToSpeech: 'рдЯреЗрдХреНрд╕реНрдЯ рдЯреВ рд╕реНрдкреАрдЪ',
      criticalAlert: 'рдорд╣рддреНрд╡рдкреВрд░реНрдг рдЪреЗрддрд╛рд╡рдиреА',
      weatherAlert: '2 рджрд┐рдиреЛрдВ рдореЗрдВ рднрд╛рд░реА рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛',
      updates: [
        { type: 'price', icon: 'ЁЯУИ', text: 'рдЧреЗрд╣реВрдВ рдФрд░ рдЪрд╛рд╡рд▓ рдХреЗ рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ рдЕрдкрдбреЗрдЯ рд╣реБрдП', color: 'bg-green-100 border-green-300' },
        { type: 'pest', icon: 'ЁЯРЫ', text: 'рдирдИ рдХреАрдЯ рдЪреЗрддрд╛рд╡рдиреА: рд╕рд░рд╕реЛрдВ рдХреА рдлрд╕рд▓ рдореЗрдВ рдПрдлрд┐рдбреНрд╕ рдкрд░ рдирдЬрд░ рд░рдЦреЗрдВ', color: 'bg-red-100 border-red-300' },
        { type: 'crop', icon: 'ЁЯМ▒', text: 'рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡: рдЪрд╛рд╡рд▓ рдХреА рдмреБрд╡рд╛рдИ рдХреЗ рд▓рд┐рдП рд╕рд╣реА рд╕рдордп', color: 'bg-blue-100 border-blue-300' },
        { type: 'weather', icon: 'ЁЯМж', text: 'рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди: рдмреБрд╡рд╛рдИ рдХреЗ рдореМрд╕рдо рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫрд╛ рд╕рдкреНрддрд╛рд╣', color: 'bg-yellow-100 border-yellow-300' }
      ],
      testimonials: [
        { name: 'рд░рд╛рдЬреЗрд╢ рдХреБрдорд╛рд░', location: 'рдкрдВрдЬрд╛рдм', story: 'AI рд╕рд▓рд╛рд╣ рд╕реЗ рдЧреЗрд╣реВрдВ рдХреА рдкреИрджрд╛рд╡рд╛рд░ 30% рдмрдврд╝рд╛рдИ', rating: 5 },
        { name: 'рдкреНрд░рд┐рдпрд╛ рд╢рд░реНрдорд╛', location: 'рд╣рд░рд┐рдпрд╛рдгрд╛', story: 'рд╕реНрдорд╛рд░реНрдЯ рдкрд╣рдЪрд╛рди рд╕реЗ рдХреАрдЯрдирд╛рд╢рдХ рдкрд░ тВ╣50,000 рдмрдЪрд╛рдП', rating: 5 }
      ]
    },
    pa: {
      welcome: 'ри╕риори╛ри░риЯ рилри╕ри▓ ри╕ри▓ри╛ри╣риХри╛ри░ ри╡ри┐рй▒риЪ риЬрйА риЖриЗриЖриВ риирйВрй░',
      subtitle: 'римри┐ри╣ридри░ рилри╕ри▓ рилрйИри╕ри▓ри┐риЖриВ ри▓риИ ридрйБри╣ри╛рибри╛ AI-ри╕рй░риЪри╛ри▓ри┐рид риЦрйЗридрйА ри╕ри╛риерйА',
      quickActions: 'ридрйБри░рй░рид риХри╛ри░ри╡ри╛риИриЖриВ',
      todaysWeather: 'риЕрй▒риЬ рижри╛ риорйМри╕рио',
      weatherForecast: '3-рижри┐рии рижри╛ рикрйВри░ри╡ри╛риирйБриори╛рии',
      recentUpdates: 'ри╣ри╛ри▓ рижрйАриЖриВ риЕрикрибрйЗриЯри╛риВ',
      getStarted: 'ри╕ри╝рйБри░рйВ риХри░рйЛ',
      askAI: 'AI ри╕ри╣ри╛риЗриХ ридрйЛриВ рикрйБрй▒риЫрйЛ',
      getCropAdvice: 'рилри╕ри▓ ри╕ри▓ри╛ри╣ рикрйНри░ри╛рикрид риХри░рйЛ',
      detectPests: 'риХрйАрйЬрйЗ рикриЫри╛ригрйЛ',
      checkPrices: 'римри╛риЬри╝ри╛ри░ ринри╛риЕ рижрйЗриЦрйЛ',
      uploadSoil: 'риори┐рй▒риЯрйА рижрйА рилрйЛриЯрйЛ риЕрикри▓рйЛриб риХри░рйЛ',
      weatherLocation: 'риири╡рйАриВ рижри┐рй▒ри▓рйА, ринри╛ри░рид',
      temperature: '28┬░C',
      condition: 'риЕрй░ри╕ри╝ри┐риХ римрижри▓рйА',
      humidity: 'риириорйА: 65%',
      rainfall: 'римри╛ри░ри┐ри╕ри╝: 2mm',
      windSpeed: 'ри╣ри╡ри╛: 12 риХри┐риорйА/риШрй░риЯри╛',
      help: 'ри╕ри╣ри╛риЗридри╛',
      successStories: 'ри╕рилри▓ридри╛ рижрйАриЖриВ риХри╣ри╛ригрйАриЖриВ',
      voiceInput: 'риЖри╡ри╛риЬри╝ риЗриирикрйБрй▒риЯ',
      textToSpeech: 'риЯрйИриХри╕риЯ риЯрйВ ри╕рикрйАриЪ',
      criticalAlert: 'риори╣рй▒ридри╡рикрйВри░рии риЪрйЗридри╛ри╡риирйА',
      weatherAlert: '2 рижри┐риири╛риВ ри╡ри┐рй▒риЪ ринри╛ри░рйА римри╛ри░ри┐ри╕ри╝ рижрйА ри╕рй░ринри╛ри╡риири╛',
      updates: [
        { type: 'price', icon: 'ЁЯУИ', text: 'риХригриХ риЕридрйЗ риЪри╛ри╡ри▓ рижрйЗ римри╛риЬри╝ри╛ри░ ринри╛риЕ риЕрикрибрйЗриЯ ри╣рйЛриП', color: 'bg-green-100 border-green-300' },
        { type: 'pest', icon: 'ЁЯРЫ', text: 'риири╡рйАриВ риХрйАрйЬрйЗ риЪрйЗридри╛ри╡риирйА: ри╕ри░рйЛриВ рижрйА рилри╕ри▓ ри╡ри┐рй▒риЪ риори╛ри╣рйВ рижри╛ ризри┐риЖрии ри░рй▒риЦрйЛ', color: 'bg-red-100 border-red-300' },
        { type: 'crop', icon: 'ЁЯМ▒', text: 'рилри╕ри▓ ри╕рйБриЭри╛риЕ: риЪри╛ри╡ри▓ рижрйА римрйАриЬри╛риИ ри▓риИ ри╕ри╣рйА ри╕риори╛риВ', color: 'bg-blue-100 border-blue-300' },
        { type: 'weather', icon: 'ЁЯМж', text: 'риорйМри╕рио рикрйВри░ри╡ри╛риирйБриори╛рии: римрйАриЬри╛риИ рижрйЗ риорйМри╕рио ри▓риИ риЪрй░риЧри╛ ри╣рилри╝ридри╛', color: 'bg-yellow-100 border-yellow-300' }
      ],
      testimonials: [
        { name: 'ри░ри╛риЬрйЗри╕ри╝ риХрйБриори╛ри░', location: 'рикрй░риЬри╛рим', story: 'AI ри╕ри▓ри╛ри╣ риири╛ри▓ риХригриХ рижрйА рикрйИрижри╛ри╡ри╛ри░ 30% ри╡ризри╛риИ', rating: 5 },
        { name: 'рикрйНри░ри┐риЖ ри╕ри╝ри░риори╛', location: 'ри╣ри░ри┐риЖригри╛', story: 'ри╕риори╛ри░риЯ рикриЫри╛риг риири╛ри▓ риХрйАриЯриири╛ри╕ри╝риХ ридрйЗ тВ╣50,000 римриЪри╛риП', rating: 5 }
      ]
    }
  };

  const t = translations[language as keyof typeof translations] || translations.en;

  const quickActionItems = [
    { 
      id: 'recommendations', 
      label: t.getCropAdvice, 
      icon: Lightbulb, 
      emoji: 'ЁЯМ▒',
      color: 'bg-green-500 hover:bg-green-600 text-white',
      description: 'Get personalized crop recommendations'
    },
    { 
      id: 'soil-upload', 
      label: t.uploadSoil, 
      icon: Camera, 
      emoji: 'ЁЯУ╖',
      color: 'bg-blue-500 hover:bg-blue-600 text-white',
      description: 'Upload soil photo for analysis'
    },
    { 
      id: 'pest-detection', 
      label: t.detectPests, 
      icon: Bug, 
      emoji: 'ЁЯРЫ',
      color: 'bg-orange-500 hover:bg-orange-600 text-white',
      description: 'Detect pests and diseases'
    },
    { 
      id: 'market-prices', 
      label: t.checkPrices, 
      icon: TrendingUp, 
      emoji: 'ЁЯУК',
      color: 'bg-yellow-500 hover:bg-yellow-600 text-white',
      description: 'Check current market prices'
    },
    { 
      id: 'chatbot', 
      label: t.askAI, 
      icon: MessageCircle, 
      emoji: 'ЁЯдЦ',
      color: 'bg-purple-500 hover:bg-purple-600 text-white',
      description: 'Ask AI assistant anything'
    }
  ];

  const weatherForecast = [
    { day: 'Today', icon: 'тЫЕ', temp: '28┬░C', condition: 'Partly Cloudy' },
    { day: 'Tomorrow', icon: 'ЁЯМзя╕П', temp: '25┬░C', condition: 'Light Rain' },
    { day: 'Day After', icon: 'тШАя╕П', temp: '32┬░C', condition: 'Sunny' }
  ];

  return (
    <div className="w-full max-w-7xl mx-auto px-2 sm:px-4 lg:px-6 space-y-4 sm:space-y-6 pb-20">
      {/* Hero Section with Voice Controls */}
      <div className="text-center bg-gradient-to-br from-green-400 via-green-500 to-green-600 rounded-xl sm:rounded-2xl p-4 sm:p-6 lg:p-8 shadow-lg text-white">
        <div className="flex justify-between items-start mb-4">
          <Button
            variant="outline"
            size="sm"
            onClick={onVoiceInput}
            className="bg-white/20 hover:bg-white/30 border-white/30 text-white"
          >
            <Mic className="w-4 h-4 mr-2" />
            {t.voiceInput}
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={onTextToSpeech}
            className="bg-white/20 hover:bg-white/30 border-white/30 text-white"
          >
            <Volume2 className="w-4 h-4 mr-2" />
            {t.textToSpeech}
          </Button>
        </div>
        
        <h1 className="text-2xl sm:text-3xl lg:text-4xl font-bold mb-3 sm:mb-4">
          {t.welcome}
        </h1>
        <p className="text-sm sm:text-base lg:text-lg mb-4 sm:mb-6 opacity-90">
          {t.subtitle}
        </p>
        <div className="text-4xl sm:text-5xl lg:text-6xl mb-2 sm:mb-4">ЁЯМ╛</div>
        
        {/* Help Button */}
        <Button
          variant="outline"
          size="sm"
          className="bg-white/20 hover:bg-white/30 border-white/30 text-white"
        >
          <HelpCircle className="w-4 h-4 mr-2" />
          {t.help} тЭУ
        </Button>
      </div>

      {/* Weather Alert */}
      <Alert className="border-red-300 bg-red-50">
        <AlertTriangle className="h-4 w-4 text-red-600" />
        <AlertDescription className="text-red-800">
          <strong>{t.criticalAlert}:</strong> {t.weatherAlert}
        </AlertDescription>
      </Alert>

      {/* Quick Actions */}
      <Card className="p-3 sm:p-4 lg:p-6 shadow-lg">
        <h2 className="text-lg sm:text-xl lg:text-2xl font-bold text-primary mb-3 sm:mb-4 flex items-center gap-2">
          <span className="text-2xl">тЪб</span>
          {t.quickActions}
        </h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
          {quickActionItems.map((item) => (
            <Button
              key={item.id}
              className={`${item.color} h-auto py-4 sm:py-6 flex flex-col gap-2 text-center min-h-[120px] shadow-md hover:shadow-lg transition-all duration-200`}
              onClick={() => onNavigate(item.id)}
            >
              <div className="text-3xl sm:text-4xl">{item.emoji}</div>
              <span className="text-sm sm:text-base font-bold leading-tight">{item.label}</span>
              <span className="text-xs opacity-90">{item.description}</span>
            </Button>
          ))}
        </div>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-3 sm:gap-4 lg:gap-6">
        {/* Weather Card */}
        <Card className="p-3 sm:p-4 lg:p-6 shadow-lg">
          <h3 className="text-base sm:text-lg lg:text-xl font-bold text-primary mb-3 sm:mb-4 flex items-center gap-2">
            <Sun className="w-5 h-5 text-yellow-500" />
            {t.todaysWeather}
          </h3>
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <MapPin className="w-4 h-4 text-muted-foreground" />
                <span className="text-sm text-muted-foreground">{t.weatherLocation}</span>
              </div>
              <Badge variant="outline" className="text-sm bg-blue-100 text-blue-800">
                {t.temperature}
              </Badge>
            </div>
            
            <div className="text-center py-4">
              <div className="text-4xl mb-2">тЫЕ</div>
              <div className="text-xl font-bold">{t.condition}</div>
            </div>
            
            <div className="grid grid-cols-3 gap-2 text-xs sm:text-sm">
              <div className="flex flex-col items-center p-2 bg-gray-50 rounded-lg">
                <Thermometer className="w-4 h-4 text-muted-foreground mb-1" />
                <span className="font-medium">{t.humidity}</span>
              </div>
              <div className="flex flex-col items-center p-2 bg-gray-50 rounded-lg">
                <CloudRain className="w-4 h-4 text-muted-foreground mb-1" />
                <span className="font-medium">{t.rainfall}</span>
              </div>
              <div className="flex flex-col items-center p-2 bg-gray-50 rounded-lg">
                <Wind className="w-4 h-4 text-muted-foreground mb-1" />
                <span className="font-medium">{t.windSpeed}</span>
              </div>
            </div>

            {/* 3-Day Forecast */}
            <div className="mt-4">
              <h4 className="text-sm font-semibold mb-2">{t.weatherForecast}</h4>
              <div className="grid grid-cols-3 gap-2">
                {weatherForecast.map((day, index) => (
                  <div key={index} className="text-center p-2 bg-gray-50 rounded-lg">
                    <div className="text-sm font-medium">{day.day}</div>
                    <div className="text-lg">{day.icon}</div>
                    <div className="text-xs text-muted-foreground">{day.temp}</div>
                    <div className="text-xs">{day.condition}</div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </Card>

        {/* Recent Updates */}
        <Card className="p-3 sm:p-4 lg:p-6 shadow-lg">
          <h3 className="text-base sm:text-lg lg:text-xl font-bold text-primary mb-3 sm:mb-4 flex items-center gap-2">
            <span className="text-2xl">ЁЯУв</span>
            {t.recentUpdates}
          </h3>
          <div className="space-y-3">
            {t.updates.map((update, index) => (
              <div key={index} className={`flex items-start gap-3 p-3 rounded-lg border ${update.color}`}>
                <div className="text-2xl">{update.icon}</div>
                <p className="text-sm text-gray-700 leading-relaxed">{update.text}</p>
              </div>
            ))}
          </div>
        </Card>
      </div>

      {/* Success Stories Banner */}
      <Card className="p-4 sm:p-6 bg-gradient-to-r from-yellow-400 via-orange-400 to-red-400 text-white shadow-lg">
        <h3 className="text-lg sm:text-xl font-bold mb-4 flex items-center gap-2">
          <Award className="w-5 h-5" />
          {t.successStories}
        </h3>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {t.testimonials.map((testimonial, index) => (
            <div key={index} className="bg-white/20 backdrop-blur-sm rounded-lg p-3">
              <div className="flex items-center gap-2 mb-2">
                <div className="flex">
                  {[...Array(testimonial.rating)].map((_, i) => (
                    <Star key={i} className="w-4 h-4 fill-yellow-300 text-yellow-300" />
                  ))}
                </div>
                <span className="text-sm font-semibold">{testimonial.name}</span>
              </div>
              <p className="text-sm opacity-90 mb-1">{testimonial.story}</p>
              <p className="text-xs opacity-75">ЁЯУН {testimonial.location}</p>
            </div>
          ))}
        </div>
      </Card>

      {/* Get Started Section */}
      <Card className="p-4 sm:p-6 text-center bg-gradient-to-r from-green-500 to-blue-500 text-white shadow-lg">
        <h3 className="text-lg sm:text-xl lg:text-2xl font-bold mb-2">{t.getStarted}</h3>
        <p className="text-sm sm:text-base text-white/90 mb-4">
          {language === 'hi' 
            ? 'рд╕реНрдорд╛рд░реНрдЯ рд╕рд▓рд╛рд╣ рдХреЗ рд╕рд╛рде рдЕрдкрдиреА рдХреГрд╖рд┐ рдпрд╛рддреНрд░рд╛ рд╢реБрд░реВ рдХрд░реЗрдВ'
            : language === 'pa'
            ? 'ри╕риори╛ри░риЯ ри╕ри▓ри╛ри╣ риири╛ри▓ риЖрикригрйА риЦрйЗридрйА рижрйА рипри╛ридри░ри╛ ри╕ри╝рйБри░рйВ риХри░рйЛ'
            : 'Start your smart farming journey with personalized advice'
          }
        </p>
        <Button
          className="bg-white text-green-600 hover:bg-gray-100 font-bold px-6 py-3 text-base"
          onClick={() => onNavigate('chatbot')}
        >
          {t.askAI} ЁЯдЦ
        </Button>
      </Card>
    </div>
  );
};