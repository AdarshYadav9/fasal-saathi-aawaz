import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';

interface Language {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
}

const languages: Language[] = [
  { code: 'en', name: 'English', nativeName: 'English', flag: 'üá¨üáß' },
  { code: 'hi', name: 'Hindi', nativeName: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
  { code: 'pa', name: 'Punjabi', nativeName: '‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä', flag: 'üáÆüá≥' },
  { code: 'gu', name: 'Gujarati', nativeName: '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä', flag: 'üáÆüá≥' },
  { code: 'mr', name: 'Marathi', nativeName: '‡§Æ‡§∞‡§æ‡§†‡•Ä', flag: 'üáÆüá≥' },
  { code: 'ta', name: 'Tamil', nativeName: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç', flag: 'üáÆüá≥' },
];

interface LanguageSelectorProps {
  selectedLanguage: string;
  onLanguageChange: (language: string) => void;
}

export const LanguageSelector = ({ selectedLanguage, onLanguageChange }: LanguageSelectorProps) => {

  const translations = {
    en: {
      smartCropAdvisory: 'Smart Crop Advisory',
      chooseLanguage: 'Choose your preferred language',
      chooseLanguageNative: '‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç | ‡®Ü‡®™‡®£‡©Ä ‡®≠‡®æ‡®∏‡®º‡®æ ‡®ö‡©Å‡®£‡©ã | ‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™≠‡™æ‡™∑‡™æ ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã',
      languageSelected: '‚úì Language selected:',
    },
    hi: {
      smartCropAdvisory: '‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§´‡§∏‡§≤ ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞',
      chooseLanguage: '‡§Ö‡§™‡§®‡•Ä ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç',
      chooseLanguageNative: '‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç | ‡®Ü‡®™‡®£‡©Ä ‡®≠‡®æ‡®∏‡®º‡®æ ‡®ö‡©Å‡®£‡©ã | ‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™≠‡™æ‡™∑‡™æ ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã',
      languageSelected: '‚úì ‡§≠‡§æ‡§∑‡§æ ‡§ö‡§Ø‡§®‡§ø‡§§:',
    },
    pa: {
      smartCropAdvisory: '‡®∏‡®Æ‡®æ‡®∞‡®ü ‡®´‡®∏‡®≤ ‡®∏‡®≤‡®æ‡®π‡®ï‡®æ‡®∞',
      chooseLanguage: '‡®Ü‡®™‡®£‡©Ä ‡®™‡®∏‡©∞‡®¶‡©Ä‡®¶‡®æ ‡®≠‡®æ‡®∏‡®º‡®æ ‡®ö‡©Å‡®£‡©ã',
      chooseLanguageNative: '‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç | ‡®Ü‡®™‡®£‡©Ä ‡®≠‡®æ‡®∏‡®º‡®æ ‡®ö‡©Å‡®£‡©ã | ‡§Ü‡§™‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ | ‡§Ü‡§™‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ',
      languageSelected: '‚úì ‡®≠‡®æ‡®∏‡®º‡®æ ‡®ö‡©Å‡®£‡©Ä ‡®ó‡®à:',
    },
    gu: {
      smartCropAdvisory: '‡™∏‡´ç‡™Æ‡™æ‡™∞‡´ç‡™ü ‡™ï‡´ç‡™∞‡´ã‡™™ ‡™è‡™°‡™µ‡™æ‡™á‡™ù‡™∞‡´Ä',
      chooseLanguage: '‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™™‡™∏‡™Ç‡™¶‡´Ä‡™¶‡™æ ‡™≠‡™æ‡™∑‡™æ ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã',
      chooseLanguageNative: '‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç | ‡®Ü‡®™‡®£‡©Ä ‡®≠‡®æ‡®∏‡®º‡®æ ‡®ö‡©Å‡®£‡©ã | ‡§Ü‡§™‡§≤‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ | ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',
      languageSelected: '‚úì ‡™≠‡™æ‡™∑‡™æ ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´á‡™≤:',
    },
    mr: {
      smartCropAdvisory: '‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ï‡•ç‡§∞‡•â‡§™ ‡§è‡§°‡§µ‡•ç‡§π‡§æ‡§Ø‡§ù‡§∞‡•Ä',
      chooseLanguage: '‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§™‡§∏‡§Ç‡§§‡•Ä‡§ö‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ',
      chooseLanguageNative: '‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç | ‡®Ü‡®™‡®£‡©Ä ‡®≠‡®æ‡®∏‡®º‡®æ ‡®ö‡©Å‡®£‡©ã | ‡§Ü‡§™‡§≤‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ | ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',
      languageSelected: '‚úì ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§≤‡•Ä:',
    },
    ta: {
      smartCropAdvisory: '‡Æ∏‡Øç‡ÆÆ‡Ææ‡Æ∞‡Øç‡Æü‡Øç ‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç ‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà',
      chooseLanguage: '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æµ‡Æø‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡ÆÆ‡Ææ‡Æ© ‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',
      chooseLanguageNative: '‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç | ‡®Ü‡®™‡®£‡©Ä ‡®≠‡®æ‡®∏‡®º‡™æ ‡®ö‡©Å‡®£‡©ã | ‡§Ü‡§™‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ | ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',
      languageSelected: '‚úì ‡ÆÆ‡Øä‡Æ¥‡Æø ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ:',
    },
  };

  const currentLanguage = languages.find(lang => lang.code === selectedLanguage) || languages[0];
  const t = translations[selectedLanguage as keyof typeof translations] || translations.en;

  const handleLanguageSelect = (language: Language) => {
    onLanguageChange(language.code);
  };

  return (
    <div className="space-y-3">
      <div className="text-center">
        <h3 className="font-poppins font-semibold text-sm text-foreground mb-1">
          {selectedLanguage === 'hi' ? '‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç' :
           selectedLanguage === 'pa' ? '‡®≠‡®æ‡®∏‡®º‡®æ ‡®ö‡©Å‡®£‡©ã' :
           'Choose Language'}
        </h3>
        <p className="text-xs text-muted-foreground font-inter">
          {selectedLanguage === 'hi' ? '‡§Ö‡§™‡§®‡•Ä ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§≠‡§æ‡§∑‡§æ' :
           selectedLanguage === 'pa' ? '‡®Ü‡®™‡®£‡©Ä ‡®™‡®∏‡©∞‡®¶‡©Ä‡®¶‡®æ ‡®≠‡®æ‡®∏‡®º‡®æ' :
           'Your preferred language'}
        </p>
      </div>

      <div className="grid grid-cols-3 gap-2">
        {languages.map((language) => (
          <Button
            key={language.code}
            variant={selectedLanguage === language.code ? "default" : "outline"}
            size="sm"
            className={`h-auto py-3 px-2 flex flex-col items-center gap-1 transition-all duration-300 ${
              selectedLanguage === language.code 
                ? 'bg-gradient-field text-white shadow-medium' 
                : 'hover:bg-muted/50'
            }`}
            onClick={() => handleLanguageSelect(language)}
          >
            <span className="text-lg">{language.flag}</span>
            <div className="text-center">
              <div className="font-inter font-medium text-xs">{language.nativeName}</div>
              <div className="text-xs opacity-70">{language.name}</div>
            </div>
          </Button>
        ))}
      </div>

      {currentLanguage && (
        <div className="flex items-center justify-center gap-2 p-2 bg-success/10 rounded-lg border border-success/20">
          <span className="text-xs font-inter text-success font-medium">
            {selectedLanguage === 'hi' ? '‡§ö‡§Ø‡§®‡§ø‡§§:' :
             selectedLanguage === 'pa' ? '‡®ö‡©Å‡®£‡®ø‡®Ü:' :
             'Selected:'} {currentLanguage.nativeName}
          </span>
        </div>
      )}
    </div>
  );
};