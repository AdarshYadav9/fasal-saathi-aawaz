import { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Mic, MicOff, Volume2, VolumeX } from 'lucide-react';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  language: string;
}

interface VoiceChatbotProps {
  language: string;
}

export const VoiceChatbot = ({ language }: VoiceChatbotProps) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [transcript, setTranscript] = useState('');
  const recognitionRef = useRef<any>(null);
  const synthRef = useRef<SpeechSynthesis | null>(null);

  // Mock responses in different languages
  const mockResponses = {
    en: [
      "Based on your location, I recommend planting wheat in November for best results.",
      "For pest control, try neem oil spray every 15 days during the growing season.",
      "Current market price for rice is тВ╣2,100 per quintal in your area.",
      "Weather forecast shows good rainfall this week, perfect for sowing season.",
    ],
    hi: [
      "рдЖрдкрдХреЗ рдХреНрд╖реЗрддреНрд░ рдХреЗ рдЕрдиреБрд╕рд╛рд░, рдирд╡рдВрдмрд░ рдореЗрдВ рдЧреЗрд╣реВрдВ рдмреЛрдирд╛ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рд░рд╣реЗрдЧрд╛ред",
      "рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг рдХреЗ рд▓рд┐рдП, рдмрдврд╝рддреЗ рдореМрд╕рдо рдореЗрдВ рд╣рд░ 15 рджрд┐рди рдореЗрдВ рдиреАрдо рдХрд╛ рддреЗрд▓ рдЫрд┐рдбрд╝рдХреЗрдВред",
      "рдЖрдкрдХреЗ рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рдЪрд╛рд╡рд▓ рдХрд╛ рд╡рд░реНрддрдорд╛рди рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ тВ╣2,100 рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓ рд╣реИред",
      "рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рдЗрд╕ рд╕рдкреНрддрд╛рд╣ рдЕрдЪреНрдЫреА рдмрд╛рд░рд┐рд╢ рджрд┐рдЦрд╛ рд░рд╣рд╛ рд╣реИ, рдмреБрд╡рд╛рдИ рдХреЗ рд▓рд┐рдП рдЙрддреНрддрдоред",
    ],
    pa: [
      "ридрйБри╣ри╛рибрйЗ риЦрйЗридри░ рижрйЗ риЕриирйБри╕ри╛ри░, риири╡рй░римри░ ри╡ри┐рй▒риЪ риХригриХ римрйАриЬригри╛ ри╕рин ридрйЛриВ ри╡ризрйАриЖ ри░ри╣рйЗриЧри╛ред",
      "риХрйАриЯ риири┐рипрй░ридри░риг ри▓риИ, ри╡ризриг рижрйЗ риорйМри╕рио ри╡ри┐рй▒риЪ ри╣ри░ 15 рижри┐рии ри╡ри┐рй▒риЪ риири┐рй░рим рижри╛ ридрйЗри▓ риЫри┐рйЬриХрйЛред",
      "ридрйБри╣ри╛рибрйЗ риЦрйЗридри░ ри╡ри┐рй▒риЪ риЪри╛ри╡ри▓ рижри╛ риорйМриЬрйВрижри╛ римри╛риЬри╝ри╛ри░ ринри╛риЕ тВ╣2,100 рикрйНри░ридрйА риХрйБриЗрй░риЯри▓ ри╣рйИред",
      "риорйМри╕рио рикрйВри░ри╡ри╛риирйБриори╛рии риЗри╕ ри╣рилри╝ридрйЗ ри╡ризрйАриЖ римри╛ри░ри┐ри╕ри╝ рижри┐риЦри╛ ри░ри┐ри╣ри╛ ри╣рйИ, римрйАриЬри╛риИ ри▓риИ римри┐ри▓риХрйБри▓ риарйАриХред",
    ],
    mr: [
      "рддреБрдордЪреНрдпрд╛ рд╕реНрдерд╛рдирд╛рдиреБрд╕рд╛рд░, рдЪрд╛рдВрдЧрд▓реНрдпрд╛ рдкрд░рд┐рдгрд╛рдорд╛рдВрд╕рд╛рдареА рдиреЛрд╡реНрд╣реЗрдВрдмрд░рдордзреНрдпреЗ рдЧрд╣реВ рд▓рд╛рд╡рдгреНрдпрд╛рдЪреА рд╢рд┐рдлрд╛рд░рд╕ рдХрд░рддреЛ.",
      "рдХреАрдЯрдХ рдирд┐рдпрдВрддреНрд░рдгрд╛рд╕рд╛рдареА, рд╡рд╛рдвреАрдЪреНрдпрд╛ рд╣рдВрдЧрд╛рдорд╛рдд рджрд░ 15 рджрд┐рд╡рд╕рд╛рдВрдиреА рдХрдбреБрд▓рд┐рдВрдмрд╛рдЪреНрдпрд╛ рддреЗрд▓рд╛рдЪреА рдлрд╡рд╛рд░рдгреА рдХрд░реВрди рдкрд╣рд╛.",
      "рддреБрдордЪреНрдпрд╛ рдкрд░рд┐рд╕рд░рд╛рдд рддрд╛рдВрджрд│рд╛рдЪрд╛ рд╕рдзреНрдпрд╛рдЪрд╛ рдмрд╛рдЬрд╛рд░рднрд╛рд╡ тВ╣2,100 рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓ рдЖрд╣реЗ.",
      "рд╣рд╡рд╛рдорд╛рди рдЕрдВрджрд╛рдЬрд╛рдиреБрд╕рд╛рд░ рдпрд╛ рдЖрдард╡рдбреНрдпрд╛рдд рдЪрд╛рдВрдЧрд▓рд╛ рдкрд╛рдКрд╕ рдЕрдкреЗрдХреНрд╖рд┐рдд рдЖрд╣реЗ, рдкреЗрд░рдгреАрдЪреНрдпрд╛ рд╣рдВрдЧрд╛рдорд╛рд╕рд╛рдареА рдЙрддреНрддрдо.",
    ],
    ta: [
      "роЙроЩрпНроХро│рпН роЗро░рпБрокрпНрокро┐роЯродрпНродро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН, роЪро┐ро▒роирпНрод ро╡ро┐ро│рпИро╡рпБроХро│рпБроХрпНроХрпБ роиро╡роорпНрокро░ро┐ро▓рпН роХрпЛродрпБроорпИ рокропро┐ро░ро┐роЯ рокро░ро┐роирпНродрпБро░рпИроХрпНроХро┐ро▒рпЗройрпН.",
      "рокрпВроЪрпНроЪро┐ роХроЯрпНроЯрпБрокрпНрокроЯрпБродрпНрод, ро╡ро│ро░рпБроорпН рокро░рпБро╡родрпНродро┐ро▓рпН 15 роиро╛роЯрпНроХро│рпБроХрпНроХрпБ роТро░рпБроорпБро▒рпИ ро╡рпЗрокрпНрок роОрогрпНрогрпЖропрпН родрпЖро│ро┐роХрпНроХ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
      "роЙроЩрпНроХро│рпН рокроХрпБродро┐ропро┐ро▓рпН роЕро░ро┐роЪро┐ропро┐ройрпН родро▒рпНрокрпЛродрпИроп роЪроирпНродрпИ ро╡ро┐ро▓рпИ роХрпБро╡ро┐рогрпНроЯро╛ро▓рпБроХрпНроХрпБ тВ╣2,100 роЖроХрпБроорпН.",
      "ро╡ро╛ройро┐ро▓рпИ роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ роЗроирпНрод ро╡ро╛ро░роорпН роиро▓рпНро▓ рооро┤рпИропрпИроХрпН роХро╛роЯрпНроЯрпБроХро┐ро▒родрпБ, ро╡ро┐родрпИрокрпНрокрпБрокрпН рокро░рпБро╡родрпНродро┐ро▒рпНроХрпБ роПро▒рпНро▒родрпБ.",
    ],
  };

  useEffect(() => {
    // Initialize speech recognition
    if ('webkitSpeechRecognition' in window) {
      const recognition = new (window as any).webkitSpeechRecognition();
      recognition.continuous = false;
      recognition.interimResults = false;
      recognition.lang = language === 'hi' ? 'hi-IN' : language === 'pa' ? 'pa-IN' : language === 'gu' ? 'gu-IN' : language === 'mr' ? 'mr-IN' : language === 'ta' ? 'ta-IN' : 'en-US';
      
      recognition.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        setTranscript(transcript);
        handleUserMessage(transcript);
      };

      recognition.onend = () => {
        setIsListening(false);
      };

      recognitionRef.current = recognition;
    }

    // Initialize speech synthesis
    synthRef.current = window.speechSynthesis;

    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
      if (synthRef.current) {
        synthRef.current.cancel();
      }
    };
  }, [language]);

  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      setIsListening(true);
      setTranscript('');
      recognitionRef.current.start();
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop();
      setIsListening(false);
    }
  };

  const handleUserMessage = async (text: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      text,
      sender: 'user',
      timestamp: new Date(),
      language,
    };

    setMessages(prev => [...prev, userMessage]);
    setIsProcessing(true);

    // Simulate processing delay
    await new Promise(resolve => setTimeout(resolve, 1500));

    // Generate mock bot response
    const responses = mockResponses[language as keyof typeof mockResponses] || mockResponses.en;
    const randomResponse = responses[Math.floor(Math.random() * responses.length)];

    const botMessage: Message = {
      id: (Date.now() + 1).toString(),
      text: randomResponse,
      sender: 'bot',
      timestamp: new Date(),
      language,
    };

    setMessages(prev => [...prev, botMessage]);
    setIsProcessing(false);

    // Speak the response
    speakText(randomResponse);
  };

  const speakText = (text: string) => {
    if (synthRef.current && !isSpeaking) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = language === 'hi' ? 'hi-IN' : language === 'pa' ? 'pa-IN' : language === 'gu' ? 'gu-IN' : language === 'mr' ? 'mr-IN' : language === 'ta' ? 'ta-IN' : 'en-US';
      utterance.rate = 0.9;
      utterance.pitch = 1;

      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);

      synthRef.current.speak(utterance);
    }
  };

  const stopSpeaking = () => {
    if (synthRef.current) {
      synthRef.current.cancel();
      setIsSpeaking(false);
    }
  };

  return (
    <div className="flex flex-col h-full max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-6">
      {/* Header */}
      <div className="mb-3 sm:mb-4">
        <h2 className="text-xl sm:text-2xl font-bold text-primary mb-2">
          ЁЯдЦ Smart Advisory Assistant
        </h2>
        <div className="flex items-center gap-2">
          <Badge variant="outline" className="text-xs sm:text-sm">
            {language === 'hi' ? 'рд╣рд┐рдВрджреА' : language === 'pa' ? 'рикрй░риЬри╛римрйА' : language === 'gu' ? 'ркЧрлБркЬрк░рк╛ркдрлА' : 'English'}
          </Badge>
          {isProcessing && (
            <Badge className="bg-voice-processing text-white animate-pulse text-xs sm:text-sm">
              Processing...
            </Badge>
          )}
          {isSpeaking && (
            <Badge className="bg-voice-listening text-white text-xs sm:text-sm">
              Speaking...
            </Badge>
          )}
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 space-y-3 sm:space-y-4 mb-4 overflow-y-auto max-h-80 sm:max-h-96">
        {messages.length === 0 && (
          <Card className="p-4 sm:p-6 text-center bg-muted/50">
            <div className="text-3xl sm:text-4xl mb-2">ЁЯМ▒</div>
            <p className="text-sm sm:text-base text-muted-foreground">
              {language === 'hi' 
                ? 'рдореБрдЭрд╕реЗ рдлрд╕рд▓ рдХреА рд╕рд▓рд╛рд╣ рдХреЗ рд▓рд┐рдП рдкреВрдЫреЗрдВ! рдиреАрдЪреЗ рдорд╛рдЗрдХ рдмрдЯрди рджрдмрд╛рдПрдВред'
                : language === 'pa'
                ? 'риорйИриирйВрй░ рилри╕ри▓ рижрйА ри╕ри▓ри╛ри╣ ри▓риИ рикрйБрй▒риЫрйЛ! ри╣рйЗриари╛риВ риори╛риИриХ римриЯрии рижримри╛риУред'
                : language === 'gu'
                ? 'ркоркирлЗ рккрк╛ркХ рк╕рк▓рк╛рк╣ ркорк╛ркЯрлЗ рккрлВркЫрлЛ! ркирлАркЪрлЗ ркорк╛ркЗркХ ркмркЯрки ркжркмрк╛рк╡рлЛ.'
                : 'Ask me for crop advice! Press the mic button below.'
              }
            </p>
          </Card>
        )}
        
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            <Card className={`p-3 sm:p-4 max-w-[calc(100%-4rem)] ${
              message.sender === 'user' 
                ? 'bg-primary text-primary-foreground ml-4' 
                : 'bg-card mr-4'
            }`}>
              <p className="text-sm sm:text-base">{message.text}</p>
              <p className="text-xs opacity-70 mt-1 sm:mt-2">
                {message.timestamp.toLocaleTimeString()}
              </p>
            </Card>
          </div>
        ))}
      </div>

      {/* Voice Controls */}
      <div className="flex items-center justify-center gap-3 sm:gap-4 p-3 sm:p-4 bg-muted/30 rounded-lg">
        <Button
          variant={isListening ? "warning" : "voice"}
          size="icon"
          onClick={isListening ? stopListening : startListening}
          disabled={isProcessing}
          className={isListening ? "animate-pulse" : ""}
        >
          {isListening ? <MicOff className="w-5 h-5" /> : <Mic className="w-5 h-5" />}
        </Button>

        <div className="flex flex-col items-center">
          <p className="text-sm font-medium text-center">
            {isListening 
              ? (language === 'hi' ? 'рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ...' : language === 'pa' ? 'ри╕рйБриг ри░ри┐ри╣ри╛ ри╣ри╛риВ...' : language === 'gu' ? 'рк╕рк╛ркВркнрк│рлА рк░рк╣рлНркпрлЛ ркЫрлБркВ...' : language === 'mr' ? 'рдРрдХрдд рдЖрд╣реЗ...' : language === 'ta' ? 'роХрпЗроЯрпНроХро┐ро▒родрпБ...' : 'Listening...')
              : (language === 'hi' ? 'рдмреЛрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рджрдмрд╛рдПрдВ' : language === 'pa' ? 'римрйЛри▓риг ри▓риИ рижримри╛риУ' : language === 'gu' ? 'ркмрлЛрк▓рк╡рк╛ ркорк╛ркЯрлЗ ркжркмрк╛рк╡рлЛ' : language === 'mr' ? 'рдмреЛрд▓рдгреНрдпрд╛рд╕рд╛рдареА рджрд╛рдмрд╛' : language === 'ta' ? 'рокрпЗроЪ роЕро┤рпБродрпНродро╡рпБроорпН' : 'Press to speak')
            }
          </p>
          {transcript && (
            <p className="text-xs text-muted-foreground mt-1">"{transcript}"</p>
          )}
        </div>

        <Button
          variant={isSpeaking ? "warning" : "secondary"}
          size="icon"
          onClick={isSpeaking ? stopSpeaking : () => {}}
          disabled={!isSpeaking}
        >
          {isSpeaking ? <VolumeX className="w-5 h-5" /> : <Volume2 className="w-5 h-5" />}
        </Button>
      </div>
    </div>
  );
};