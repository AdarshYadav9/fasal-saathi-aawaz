import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  ArrowLeft, 
  ArrowRight, 
  CheckCircle, 
  MapPin, 
  Calendar, 
  Droplets, 
  Thermometer,
  Sun,
  Wind,
  Soil,
  Sprout,
  TrendingUp,
  AlertCircle,
  Info,
  Star,
  Clock,
  DollarSign
} from 'lucide-react';

interface CropRecommendationProps {
  language: string;
  onBack: () => void;
}

interface SoilType {
  id: string;
  name: string;
  nameNative: string;
  description: string;
  image: string;
  color: string;
}

interface Crop {
  id: string;
  name: string;
  nameNative: string;
  season: string;
  duration: string;
  yield: string;
  price: string;
  suitability: number;
  description: string;
  requirements: string[];
  benefits: string[];
  image: string;
}

const CropRecommendation: React.FC<CropRecommendationProps> = ({ language, onBack }) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    location: '',
    soilType: '',
    season: '',
    area: '',
    budget: '',
    experience: '',
    irrigation: '',
    climate: ''
  });
  const [recommendations, setRecommendations] = useState<Crop[]>([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  const soilTypes: SoilType[] = [
    {
      id: 'alluvial',
      name: 'Alluvial Soil',
      nameNative: language === 'hi' ? '‡§ú‡§≤‡•ã‡§¢‡§º ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä' : language === 'pa' ? '‡®ú‡®≤‡©ã‡©ú ‡®Æ‡®ø‡©±‡®ü‡©Ä' : 'Alluvial Soil',
      description: language === 'hi' ? '‡§®‡§¶‡§ø‡§Ø‡•ã‡§Ç ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§¨‡§π‡§æ‡§ï‡§∞ ‡§≤‡§æ‡§à ‡§ó‡§à ‡§â‡§™‡§ú‡§æ‡§ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä' : 
                   language === 'pa' ? '‡®®‡®¶‡©Ä‡®Ü‡®Ç ‡®¶‡©Å‡®Ü‡®∞‡®æ ‡®µ‡®π‡®æ‡®á‡®Ü ‡®ó‡®ø‡®Ü ‡®â‡®™‡®ú‡®æ‡®ä ‡®Æ‡®ø‡©±‡®ü‡©Ä' : 
                   'Fertile soil deposited by rivers',
      image: 'üåä',
      color: 'bg-blue-100 border-blue-300'
    },
    {
      id: 'black',
      name: 'Black Soil',
      nameNative: language === 'hi' ? '‡§ï‡§æ‡§≤‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä' : language === 'pa' ? '‡®ï‡®æ‡®≤‡©Ä ‡®Æ‡®ø‡©±‡®ü‡©Ä' : 'Black Soil',
      description: language === 'hi' ? '‡§ï‡§™‡§æ‡§∏ ‡§î‡§∞ ‡§ó‡§®‡•ç‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§' : 
                   language === 'pa' ? '‡®ï‡®™‡®æ‡®π ‡®Ö‡®§‡©á ‡®ó‡©∞‡®®‡©á ‡®≤‡®à ‡®â‡®™‡®Ø‡©Å‡®ï‡®§' : 
                   'Suitable for cotton and sugarcane',
      image: 'üñ§',
      color: 'bg-gray-100 border-gray-300'
    },
    {
      id: 'red',
      name: 'Red Soil',
      nameNative: language === 'hi' ? '‡§≤‡§æ‡§≤ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä' : language === 'pa' ? '‡®≤‡®æ‡®≤ ‡®Æ‡®ø‡©±‡®ü‡©Ä' : 'Red Soil',
      description: language === 'hi' ? '‡§¶‡§ï‡•ç‡§∑‡§ø‡§£ ‡§≠‡§æ‡§∞‡§§ ‡§Æ‡•á‡§Ç ‡§™‡§æ‡§à ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä' : 
                   language === 'pa' ? '‡®¶‡©±‡®ñ‡®£ ‡®≠‡®æ‡®∞‡®§ ‡®µ‡®ø‡©±‡®ö ‡®Æ‡®ø‡®≤‡®£ ‡®µ‡®æ‡®≤‡©Ä ‡®Æ‡®ø‡©±‡®ü‡©Ä' : 
                   'Found in South India',
      image: 'üî¥',
      color: 'bg-red-100 border-red-300'
    },
    {
      id: 'loamy',
      name: 'Loamy Soil',
      nameNative: language === 'hi' ? '‡§¶‡•ã‡§Æ‡§ü ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä' : language === 'pa' ? '‡®¶‡©ã‡®Æ‡®ü ‡®Æ‡®ø‡©±‡®ü‡©Ä' : 'Loamy Soil',
      description: language === 'hi' ? '‡§∏‡§¨‡§∏‡•á ‡§â‡§™‡§ú‡§æ‡§ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä, ‡§∏‡§≠‡•Ä ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§' : 
                   language === 'pa' ? '‡®∏‡®≠ ‡®§‡©ã‡®Ç ‡®â‡®™‡®ú‡®æ‡®ä ‡®Æ‡®ø‡©±‡®ü‡©Ä, ‡®∏‡®æ‡®∞‡©Ä‡®Ü‡®Ç ‡®´‡®∏‡®≤‡®æ‡®Ç ‡®≤‡®à ‡®â‡®™‡®Ø‡©Å‡®ï‡®§' : 
                   'Most fertile soil, suitable for all crops',
      image: 'üå±',
      color: 'bg-green-100 border-green-300'
    },
    {
      id: 'sandy',
      name: 'Sandy Soil',
      nameNative: language === 'hi' ? '‡§¨‡§≤‡•Å‡§à ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä' : language === 'pa' ? '‡®∞‡©á‡®§‡®≤‡©Ä ‡®Æ‡®ø‡©±‡®ü‡©Ä' : 'Sandy Soil',
      description: language === 'hi' ? '‡§™‡§æ‡§®‡•Ä ‡§ú‡§≤‡•ç‡§¶‡•Ä ‡§®‡§ø‡§ï‡§≤ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à' : 
                   language === 'pa' ? '‡®™‡®æ‡®£‡©Ä ‡®ú‡®≤‡®¶‡©Ä ‡®®‡®ø‡®ï‡®≤ ‡®ú‡®æ‡®Ç‡®¶‡®æ ‡®π‡©à' : 
                   'Water drains quickly',
      image: 'üèñÔ∏è',
      color: 'bg-yellow-100 border-yellow-300'
    },
    {
      id: 'clay',
      name: 'Clay Soil',
      nameNative: language === 'hi' ? '‡§ö‡§ø‡§ï‡§®‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä' : language === 'pa' ? '‡®ö‡®ø‡®ï‡®®‡©Ä ‡®Æ‡®ø‡©±‡®ü‡©Ä' : 'Clay Soil',
      description: language === 'hi' ? '‡§™‡§æ‡§®‡•Ä ‡§ï‡•ã ‡§∞‡•ã‡§ï‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä' : 
                   language === 'pa' ? '‡®™‡®æ‡®£‡©Ä ‡®®‡©Ç‡©∞ ‡®∞‡©ã‡®ï‡®£ ‡®µ‡®æ‡®≤‡©Ä ‡®Æ‡®ø‡©±‡®ü‡©Ä' : 
                   'Water-retaining soil',
      image: 'üè∫',
      color: 'bg-purple-100 border-purple-300'
    }
  ];

  const crops: Crop[] = [
    {
      id: 'wheat',
      name: 'Wheat',
      nameNative: language === 'hi' ? '‡§ó‡•á‡§π‡•Ç‡§Ç' : language === 'pa' ? '‡®ï‡®£‡®ï' : 'Wheat',
      season: language === 'hi' ? '‡§∞‡§¨‡•Ä' : language === 'pa' ? '‡®∞‡®¨‡©Ä' : 'Rabi',
      duration: language === 'hi' ? '120-150 ‡§¶‡§ø‡§®' : language === 'pa' ? '120-150 ‡®¶‡®ø‡®®' : '120-150 days',
      yield: language === 'hi' ? '40-50 ‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤/‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞' : language === 'pa' ? '40-50 ‡®ï‡©Å‡®á‡©∞‡®ü‡®≤/‡®π‡©à‡®ï‡®ü‡©á‡®Ö‡®∞' : '40-50 quintals/hectare',
      price: '‚Çπ2,100/quintal',
      suitability: 95,
      description: language === 'hi' ? '‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∞‡§¨‡•Ä ‡§´‡§∏‡§≤, ‡§™‡•ã‡§∑‡§ï ‡§§‡§§‡•ç‡§µ‡•ã‡§Ç ‡§∏‡•á ‡§≠‡§∞‡§™‡•Ç‡§∞' : 
                   language === 'pa' ? '‡®≠‡®æ‡®∞‡®§ ‡®¶‡©Ä ‡®Æ‡©Å‡©±‡®ñ ‡®∞‡®¨‡©Ä ‡®´‡®∏‡®≤, ‡®™‡©ã‡®∏‡®º‡®ï ‡®§‡©±‡®§‡®æ‡®Ç ‡®®‡®æ‡®≤ ‡®≠‡®∞‡®™‡©Ç‡®∞' : 
                   'Main rabi crop of India, rich in nutrients',
      requirements: [
        language === 'hi' ? '‡§†‡§Ç‡§°‡§æ ‡§Æ‡•å‡§∏‡§Æ' : language === 'pa' ? '‡®†‡©∞‡®°‡®æ ‡®Æ‡©å‡®∏‡®Æ' : 'Cool weather',
        language === 'hi' ? '‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä' : language === 'pa' ? '‡®ö‡©∞‡®ó‡©Ä ‡®ú‡®≤ ‡®®‡®ø‡®ï‡®æ‡®∏‡©Ä' : 'Good drainage',
        language === 'hi' ? '‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ' : language === 'pa' ? '‡®ñ‡®æ‡®¶ ‡®¶‡©Ä ‡®≤‡©ã‡©ú' : 'Fertilizer requirement'
      ],
      benefits: [
        language === 'hi' ? '‡§â‡§ö‡•ç‡§ö ‡§™‡•à‡§¶‡§æ‡§µ‡§æ‡§∞' : language === 'pa' ? '‡®â‡©±‡®ö ‡®™‡©à‡®¶‡®æ‡®µ‡®æ‡®∞' : 'High yield',
        language === 'hi' ? '‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§≠‡§æ‡§µ' : language === 'pa' ? '‡®ö‡©∞‡®ó‡®æ ‡®¨‡®æ‡®ú‡®º‡®æ‡®∞ ‡®≠‡®æ‡®Ö' : 'Good market price',
        language === 'hi' ? '‡§ï‡§Æ ‡§ú‡•ã‡§ñ‡§ø‡§Æ' : language === 'pa' ? '‡®ï‡®Æ ‡®ú‡©ã‡®ñ‡®ø‡®Æ' : 'Low risk'
      ],
      image: 'üåæ'
    },
    {
      id: 'rice',
      name: 'Rice',
      nameNative: language === 'hi' ? '‡§ö‡§æ‡§µ‡§≤' : language === 'pa' ? '‡®ö‡®æ‡®µ‡®≤' : 'Rice',
      season: language === 'hi' ? '‡§ñ‡§∞‡•Ä‡§´' : language === 'pa' ? '‡®ñ‡®∞‡©Ä‡®´' : 'Kharif',
      duration: language === 'hi' ? '90-120 ‡§¶‡§ø‡§®' : language === 'pa' ? '90-120 ‡®¶‡®ø‡®®' : '90-120 days',
      yield: language === 'hi' ? '30-40 ‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤/‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞' : language === 'pa' ? '30-40 ‡®ï‡©Å‡®á‡©∞‡®ü‡®≤/‡®π‡©à‡®ï‡®ü‡©á‡®Ö‡®∞' : '30-40 quintals/hectare',
      price: '‚Çπ3,200/quintal',
      suitability: 88,
      description: language === 'hi' ? '‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ñ‡§æ‡§¶‡•ç‡§Ø ‡§´‡§∏‡§≤, ‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§Ö‡§ß‡§ø‡§ï ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ' : 
                   language === 'pa' ? '‡®≠‡®æ‡®∞‡®§ ‡®¶‡©Ä ‡®Æ‡©Å‡©±‡®ñ ‡®ñ‡®æ‡®¶‡®Ø ‡®´‡®∏‡®≤, ‡®™‡®æ‡®£‡©Ä ‡®¶‡©Ä ‡®µ‡®ß‡©á‡®∞‡©á ‡®≤‡©ã‡©ú' : 
                   'Main food crop of India, requires more water',
      requirements: [
        language === 'hi' ? '‡§ó‡§∞‡•ç‡§Æ ‡§î‡§∞ ‡§®‡§Æ ‡§Æ‡•å‡§∏‡§Æ' : language === 'pa' ? '‡®ó‡®∞‡®Æ ‡®Ö‡®§‡©á ‡®®‡®Æ ‡®Æ‡©å‡®∏‡®Æ' : 'Warm and humid weather',
        language === 'hi' ? '‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§Ö‡§ß‡§ø‡§ï ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ' : language === 'pa' ? '‡®™‡®æ‡®£‡©Ä ‡®¶‡©Ä ‡®µ‡®ß‡©á‡®∞‡©á ‡®≤‡©ã‡©ú' : 'High water requirement',
        language === 'hi' ? '‡§â‡§™‡§ú‡§æ‡§ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä' : language === 'pa' ? '‡®â‡®™‡®ú‡®æ‡®ä ‡®Æ‡®ø‡©±‡®ü‡©Ä' : 'Fertile soil'
      ],
      benefits: [
        language === 'hi' ? '‡§â‡§ö‡•ç‡§ö ‡§™‡•ã‡§∑‡§£ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø' : language === 'pa' ? '‡®â‡©±‡®ö ‡®™‡©ã‡®∏‡®º‡®£ ‡®Æ‡©Å‡©±‡®≤' : 'High nutritional value',
        language === 'hi' ? '‡§∏‡•ç‡§•‡§ø‡§∞ ‡§Æ‡§æ‡§Ç‡§ó' : language === 'pa' ? '‡®∏‡®•‡®ø‡®∞ ‡®Æ‡©∞‡®ó' : 'Stable demand',
        language === 'hi' ? '‡§®‡§ø‡§∞‡•ç‡§Ø‡§æ‡§§ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ' : language === 'pa' ? '‡®®‡®ø‡®∞‡®Ø‡®æ‡®§ ‡®¶‡©Ä ‡®∏‡©∞‡®≠‡®æ‡®µ‡®®‡®æ' : 'Export potential'
      ],
      image: 'üçö'
    },
    {
      id: 'mustard',
      name: 'Mustard',
      nameNative: language === 'hi' ? '‡§∏‡§∞‡§∏‡•ã‡§Ç' : language === 'pa' ? '‡®∏‡®∞‡©ã‡®Ç' : 'Mustard',
      season: language === 'hi' ? '‡§∞‡§¨‡•Ä' : language === 'pa' ? '‡®∞‡®¨‡©Ä' : 'Rabi',
      duration: language === 'hi' ? '100-120 ‡§¶‡§ø‡§®' : language === 'pa' ? '100-120 ‡®¶‡®ø‡®®' : '100-120 days',
      yield: language === 'hi' ? '15-20 ‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤/‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞' : language === 'pa' ? '15-20 ‡®ï‡©Å‡®á‡©∞‡®ü‡®≤/‡®π‡©à‡®ï‡®ü‡©á‡®Ö‡®∞' : '15-20 quintals/hectare',
      price: '‚Çπ5,500/quintal',
      suitability: 92,
      description: language === 'hi' ? '‡§§‡•á‡§≤ ‡§ï‡•Ä ‡§´‡§∏‡§≤, ‡§ï‡§Æ ‡§™‡§æ‡§®‡•Ä ‡§Æ‡•á‡§Ç ‡§â‡§ó‡§æ‡§à ‡§ú‡§æ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à' : 
                   language === 'pa' ? '‡®§‡©á‡®≤ ‡®¶‡©Ä ‡®´‡®∏‡®≤, ‡®ï‡®Æ ‡®™‡®æ‡®£‡©Ä ‡®µ‡®ø‡©±‡®ö ‡®â‡®ó‡®æ‡®à ‡®ú‡®æ ‡®∏‡®ï‡®¶‡©Ä ‡®π‡©à' : 
                   'Oil crop, can be grown with less water',
      requirements: [
        language === 'hi' ? '‡§†‡§Ç‡§°‡§æ ‡§Æ‡•å‡§∏‡§Æ' : language === 'pa' ? '‡®†‡©∞‡®°‡®æ ‡®Æ‡©å‡®∏‡®Æ' : 'Cool weather',
        language === 'hi' ? '‡§ï‡§Æ ‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ' : language === 'pa' ? '‡®ï‡®Æ ‡®™‡®æ‡®£‡©Ä ‡®¶‡©Ä ‡®≤‡©ã‡©ú' : 'Low water requirement',
        language === 'hi' ? '‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä' : language === 'pa' ? '‡®ö‡©∞‡®ó‡©Ä ‡®ú‡®≤ ‡®®‡®ø‡®ï‡®æ‡®∏‡©Ä' : 'Good drainage'
      ],
      benefits: [
        language === 'hi' ? '‡§â‡§ö‡•ç‡§ö ‡§Æ‡•Ç‡§≤‡•ç‡§Ø' : language === 'pa' ? '‡®â‡©±‡®ö ‡®Æ‡©Å‡©±‡®≤' : 'High value',
        language === 'hi' ? '‡§ï‡§Æ ‡§≤‡§æ‡§ó‡§§' : language === 'pa' ? '‡®ï‡®Æ ‡®≤‡®æ‡®ó‡®§' : 'Low cost',
        language === 'hi' ? '‡§§‡•á‡§≤ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®' : language === 'pa' ? '‡®§‡©á‡®≤ ‡®â‡®§‡®™‡®æ‡®¶‡®®' : 'Oil production'
      ],
      image: 'üåø'
    }
  ];

  const steps = [
    { id: 1, title: language === 'hi' ? '‡§∏‡•ç‡§•‡§æ‡§®' : language === 'pa' ? '‡®∏‡®•‡®æ‡®®' : 'Location' },
    { id: 2, title: language === 'hi' ? '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä' : language === 'pa' ? '‡®Æ‡®ø‡©±‡®ü‡©Ä' : 'Soil' },
    { id: 3, title: language === 'hi' ? '‡§Æ‡•å‡§∏‡§Æ' : language === 'pa' ? '‡®Æ‡©å‡®∏‡®Æ' : 'Season' },
    { id: 4, title: language === 'hi' ? '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£' : language === 'pa' ? '‡®µ‡®ø‡®∏‡®º‡®≤‡©á‡®∏‡®º‡®£' : 'Analysis' }
  ];

  const handleNext = () => {
    if (currentStep < 4) {
      setCurrentStep(currentStep + 1);
    } else {
      generateRecommendations();
    }
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    } else {
      onBack();
    }
  };

  const generateRecommendations = () => {
    setIsAnalyzing(true);
    
    // Simulate analysis
    setTimeout(() => {
      const filteredCrops = crops.filter(crop => {
        if (formData.soilType === 'alluvial' || formData.soilType === 'loamy') {
          return crop.suitability > 85;
        } else if (formData.soilType === 'black') {
          return crop.id === 'wheat' || crop.id === 'mustard';
        } else {
          return crop.suitability > 80;
        }
      });
      
      setRecommendations(filteredCrops);
      setIsAnalyzing(false);
    }, 3000);
  };

  const getStepContent = () => {
    switch (currentStep) {
      case 1:
  return (
          <div className="space-y-6">
            <div className="text-center">
              <h2 className="text-2xl font-poppins font-bold text-forest-500 mb-2">
                {language === 'hi' ? '‡§Ö‡§™‡§®‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç' :
                 language === 'pa' ? '‡®Ü‡®™‡®£‡®æ ‡®∏‡®•‡®æ‡®® ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã' :
                 'Enter Your Location'}
              </h2>
              <p className="text-muted-foreground font-inter">
                {language === 'hi' ? '‡§∏‡§ü‡•Ä‡§ï ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à' :
                 language === 'pa' ? '‡®∏‡®π‡©Ä ‡®∏‡©Å‡®ù‡®æ‡®Ö ‡®≤‡®à ‡®∏‡®•‡®æ‡®® ‡®¶‡©Ä ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä ‡®ú‡®º‡®∞‡©Ç‡®∞‡©Ä ‡®π‡©à' :
                 'Location information is required for accurate recommendations'}
              </p>
      </div>

            <div className="space-y-4">
          <div className="space-y-2">
                <Label htmlFor="location" className="font-inter font-medium">
                  <MapPin className="w-4 h-4 inline mr-2" />
                  {language === 'hi' ? '‡§ó‡§æ‡§Ç‡§µ/‡§∂‡§π‡§∞ ‡§ï‡§æ ‡§®‡§æ‡§Æ' :
                   language === 'pa' ? '‡®™‡®ø‡©∞‡®°/‡®∏‡®º‡®π‡®ø‡®∞ ‡®¶‡®æ ‡®®‡®æ‡®Æ' :
                   'Village/City Name'}
            </Label>
            <Input
              id="location"
              value={formData.location}
              onChange={(e) => setFormData({...formData, location: e.target.value})}
                  placeholder={language === 'hi' ? '‡§ú‡•à‡§∏‡•á: ‡§ï‡§æ‡§®‡§™‡•Å‡§∞, ‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂' :
                             language === 'pa' ? '‡®ú‡®ø‡®µ‡©á‡®Ç: ‡®ï‡®æ‡®®‡®™‡©Å‡®∞, ‡®â‡©±‡®§‡®∞ ‡®™‡©ç‡®∞‡®¶‡©á‡®∏‡®º' :
                             'e.g.: Kanpur, Uttar Pradesh'}
                  className="h-12 text-lg font-inter"
            />
          </div>

          <div className="space-y-2">
                <Label htmlFor="area" className="font-inter font-medium">
                  <TrendingUp className="w-4 h-4 inline mr-2" />
                  {language === 'hi' ? '‡§ñ‡•á‡§§‡•Ä ‡§ï‡§æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≤ (‡§è‡§ï‡§°‡§º)' :
                   language === 'pa' ? '‡®ñ‡©á‡®§‡©Ä ‡®¶‡®æ ‡®ñ‡©á‡®§‡®∞‡®´‡®≤ (‡®è‡®ï‡©ú)' :
                   'Farming Area (acres)'}
                </Label>
                <Input
                  id="area"
                  type="number"
                  value={formData.area}
                  onChange={(e) => setFormData({...formData, area: e.target.value})}
                  placeholder={language === 'hi' ? '‡§ú‡•à‡§∏‡•á: 5 ‡§è‡§ï‡§°‡§º' :
                             language === 'pa' ? '‡®ú‡®ø‡®µ‡©á‡®Ç: 5 ‡®è‡®ï‡©ú' :
                             'e.g.: 5 acres'}
                  className="h-12 text-lg font-inter"
                />
              </div>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div className="text-center">
              <h2 className="text-2xl font-poppins font-bold text-forest-500 mb-2">
                {language === 'hi' ? '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç' :
                 language === 'pa' ? '‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡®æ ‡®™‡©ç‡®∞‡®ï‡®æ‡®∞ ‡®ö‡©Å‡®£‡©ã' :
                 'Select Soil Type'}
              </h2>
              <p className="text-muted-foreground font-inter">
                {language === 'hi' ? '‡§Ö‡§™‡§®‡•Ä ‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç' :
                 language === 'pa' ? '‡®Ü‡®™‡®£‡©Ä ‡®ú‡®º‡®Æ‡©Ä‡®® ‡®¶‡©Ä ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡©á ‡®Ö‡®®‡©Å‡®∏‡®æ‡®∞ ‡®´‡®∏‡®≤ ‡®ö‡©Å‡®£‡©ã' :
                 'Choose crops according to your land\'s soil'}
              </p>
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {soilTypes.map((soil) => (
                <Card
                  key={soil.id}
                  className={`cursor-pointer transition-all duration-300 hover:shadow-medium ${
                    formData.soilType === soil.id ? 'ring-2 ring-forest-500 bg-forest-50' : soil.color
                  }`}
                  onClick={() => setFormData({...formData, soilType: soil.id})}
                >
                  <CardContent className="p-4">
                    <div className="flex items-center gap-3 mb-3">
                      <div className="text-3xl">{soil.image}</div>
                      <div>
                        <h3 className="font-poppins font-semibold text-lg">{soil.nameNative}</h3>
                        <p className="text-sm text-muted-foreground font-inter">{soil.name}</p>
                      </div>
                    </div>
                    <p className="text-sm text-muted-foreground font-inter">{soil.description}</p>
                    {formData.soilType === soil.id && (
                      <div className="mt-3 flex items-center gap-2 text-forest-600">
                        <CheckCircle className="w-4 h-4" />
                        <span className="text-sm font-inter font-medium">
                          {language === 'hi' ? '‡§ö‡§Ø‡§®‡§ø‡§§' : language === 'pa' ? '‡®ö‡©Å‡®£‡®ø‡®Ü' : 'Selected'}
                        </span>
                      </div>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <div className="text-center">
              <h2 className="text-2xl font-poppins font-bold text-forest-500 mb-2">
                {language === 'hi' ? '‡§Æ‡•å‡§∏‡§Æ ‡§î‡§∞ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø' :
                 language === 'pa' ? '‡®Æ‡©å‡®∏‡®Æ ‡®Ö‡®§‡©á ‡®∏‡®•‡®ø‡®§‡©Ä' :
                 'Weather & Conditions'}
              </h2>
              <p className="text-muted-foreground font-inter">
                {language === 'hi' ? '‡§Ö‡§™‡§®‡•Ä ‡§ï‡•É‡§∑‡§ø ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç' :
                 language === 'pa' ? '‡®Ü‡®™‡®£‡©Ä ‡®ñ‡©á‡®§‡©Ä ‡®∏‡®•‡®ø‡®§‡©Ä ‡®¨‡®æ‡®∞‡©á ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä ‡®¶‡®ø‡®ì' :
                 'Provide information about your farming conditions'}
              </p>
            </div>

            <div className="space-y-4">
              <div className="space-y-2">
                <Label className="font-inter font-medium">
                  <Calendar className="w-4 h-4 inline mr-2" />
                  {language === 'hi' ? '‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ' :
                   language === 'pa' ? '‡®´‡®∏‡®≤ ‡®¶‡®æ ‡®Æ‡©å‡®∏‡®Æ' :
                   'Crop Season'}
            </Label>
                <Select value={formData.season} onValueChange={(value) => setFormData({...formData, season: value})}>
                  <SelectTrigger className="h-12 font-inter">
                    <SelectValue placeholder={language === 'hi' ? '‡§Æ‡•å‡§∏‡§Æ ‡§ö‡•Å‡§®‡•á‡§Ç' : language === 'pa' ? '‡®Æ‡©å‡®∏‡®Æ ‡®ö‡©Å‡®£‡©ã' : 'Select Season'} />
              </SelectTrigger>
              <SelectContent>
                    <SelectItem value="kharif">
                      {language === 'hi' ? '‡§ñ‡§∞‡•Ä‡§´ (‡§ú‡•Ç‡§®-‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞)' : language === 'pa' ? '‡®ñ‡®∞‡©Ä‡®´ (‡®ú‡©Ç‡®®-‡®Ö‡®ï‡®§‡©Ç‡®¨‡®∞)' : 'Kharif (June-October)'}
                    </SelectItem>
                    <SelectItem value="rabi">
                      {language === 'hi' ? '‡§∞‡§¨‡•Ä (‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞-‡§Æ‡§æ‡§∞‡•ç‡§ö)' : language === 'pa' ? '‡®∞‡®¨‡©Ä (‡®Ö‡®ï‡®§‡©Ç‡®¨‡®∞-‡®Æ‡®æ‡®∞‡®ö)' : 'Rabi (October-March)'}
                    </SelectItem>
                    <SelectItem value="zaid">
                      {language === 'hi' ? '‡§ú‡§æ‡§Ø‡§¶ (‡§Æ‡§æ‡§∞‡•ç‡§ö-‡§ú‡•Ç‡§®)' : language === 'pa' ? '‡®ú‡®º‡©à‡®¶ (‡®Æ‡®æ‡®∞‡®ö-‡®ú‡©Ç‡®®)' : 'Zaid (March-June)'}
                    </SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
                <Label className="font-inter font-medium">
                  <Droplets className="w-4 h-4 inline mr-2" />
                  {language === 'hi' ? '‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡•Ä ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ' :
                   language === 'pa' ? '‡®∏‡®ø‡©∞‡®ö‡®æ‡®à ‡®¶‡©Ä ‡®∏‡©Å‡®µ‡®ø‡®ß‡®æ' :
                   'Irrigation Facility'}
            </Label>
                <Select value={formData.irrigation} onValueChange={(value) => setFormData({...formData, irrigation: value})}>
                  <SelectTrigger className="h-12 font-inter">
                    <SelectValue placeholder={language === 'hi' ? '‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ö‡•Å‡§®‡•á‡§Ç' : language === 'pa' ? '‡®∏‡®ø‡©∞‡®ö‡®æ‡®à ‡®ö‡©Å‡®£‡©ã' : 'Select Irrigation'} />
              </SelectTrigger>
              <SelectContent>
                    <SelectItem value="good">
                      {language === 'hi' ? '‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à' : language === 'pa' ? '‡®ö‡©∞‡®ó‡©Ä ‡®∏‡®ø‡©∞‡®ö‡®æ‡®à' : 'Good Irrigation'}
                    </SelectItem>
                    <SelectItem value="moderate">
                      {language === 'hi' ? '‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à' : language === 'pa' ? '‡®Æ‡©±‡®ß‡®Æ ‡®∏‡®ø‡©∞‡®ö‡®æ‡®à' : 'Moderate Irrigation'}
                    </SelectItem>
                    <SelectItem value="limited">
                      {language === 'hi' ? '‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à' : language === 'pa' ? '‡®∏‡©Ä‡®Æ‡®ø‡®§ ‡®∏‡®ø‡©∞‡®ö‡®æ‡®à' : 'Limited Irrigation'}
                    </SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
                <Label className="font-inter font-medium">
                  <DollarSign className="w-4 h-4 inline mr-2" />
                  {language === 'hi' ? '‡§¨‡§ú‡§ü (‡§™‡•ç‡§∞‡§§‡§ø ‡§è‡§ï‡§°‡§º)' :
                   language === 'pa' ? '‡®¨‡®ú‡®ü (‡®™‡©ç‡®∞‡®§‡©Ä ‡®è‡®ï‡©ú)' :
                   'Budget (per acre)'}
            </Label>
                <Select value={formData.budget} onValueChange={(value) => setFormData({...formData, budget: value})}>
                  <SelectTrigger className="h-12 font-inter">
                    <SelectValue placeholder={language === 'hi' ? '‡§¨‡§ú‡§ü ‡§ö‡•Å‡§®‡•á‡§Ç' : language === 'pa' ? '‡®¨‡®ú‡®ü ‡®ö‡©Å‡®£‡©ã' : 'Select Budget'} />
              </SelectTrigger>
              <SelectContent>
                    <SelectItem value="low">
                      {language === 'hi' ? '‡§ï‡§Æ ‡§¨‡§ú‡§ü (< ‚Çπ20,000)' : language === 'pa' ? '‡®ï‡®Æ ‡®¨‡®ú‡®ü (< ‚Çπ20,000)' : 'Low Budget (< ‚Çπ20,000)'}
                    </SelectItem>
                    <SelectItem value="medium">
                      {language === 'hi' ? '‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§¨‡§ú‡§ü (‚Çπ20,000-‚Çπ50,000)' : language === 'pa' ? '‡®Æ‡©±‡®ß‡®Æ ‡®¨‡®ú‡®ü (‚Çπ20,000-‚Çπ50,000)' : 'Medium Budget (‚Çπ20,000-‚Çπ50,000)'}
                    </SelectItem>
                    <SelectItem value="high">
                      {language === 'hi' ? '‡§â‡§ö‡•ç‡§ö ‡§¨‡§ú‡§ü (> ‚Çπ50,000)' : language === 'pa' ? '‡®â‡©±‡®ö ‡®¨‡®ú‡®ü (> ‚Çπ50,000)' : 'High Budget (> ‚Çπ50,000)'}
                    </SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            {isAnalyzing ? (
              <div className="text-center py-12">
                <div className="w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-forest-500 to-forest-600 rounded-full flex items-center justify-center animate-pulse">
                  <Sprout className="w-10 h-10 text-white" />
                </div>
                <h2 className="text-2xl font-poppins font-bold text-forest-500 mb-2">
                  {language === 'hi' ? '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...' :
                   language === 'pa' ? '‡®µ‡®ø‡®∏‡®º‡®≤‡©á‡®∏‡®º‡®£ ‡®ï‡®∞ ‡®∞‡®π‡©á ‡®π‡®æ‡®Ç...' :
                   'Analyzing...'}
                </h2>
                <p className="text-muted-foreground font-inter mb-4">
                  {language === 'hi' ? '‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡§æ ‡§ö‡§Ø‡§® ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç' :
                   language === 'pa' ? '‡®§‡©Å‡®π‡®æ‡®°‡©Ä ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä ‡®¶‡©á ‡®Ü‡®ß‡®æ‡®∞ \'‡®§‡©á ‡®∏‡®∞‡®µ‡©ã‡®§‡®Æ ‡®´‡®∏‡®≤‡®æ‡®Ç ‡®¶‡®æ ‡®ö‡®Ø‡®® ‡®ï‡®∞ ‡®∞‡®π‡©á ‡®π‡®æ‡®Ç' :
                   'Selecting the best crops based on your information'}
                </p>
                <Progress value={75} className="w-full max-w-md mx-auto" />
              </div>
            ) : (
              <div className="space-y-6">
                <div className="text-center">
                  <h2 className="text-2xl font-poppins font-bold text-forest-500 mb-2">
                    {language === 'hi' ? '‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ' :
                     language === 'pa' ? '‡®´‡®∏‡®≤ ‡®∏‡©Å‡®ù‡®æ‡®Ö' :
                     'Crop Recommendations'}
                  </h2>
                  <p className="text-muted-foreground font-inter">
                    {language === 'hi' ? '‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§´‡§∏‡§≤‡•á‡§Ç' :
                     language === 'pa' ? '‡®§‡©Å‡®π‡®æ‡®°‡©Ä ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä ‡®¶‡©á ‡®Ü‡®ß‡®æ‡®∞ \'‡®§‡©á ‡®∏‡®∞‡®µ‡©ã‡®§‡®Æ ‡®´‡®∏‡®≤‡®æ‡®Ç' :
                     'Best crops based on your information'}
                  </p>
        </div>

                <div className="space-y-4">
                  {recommendations.map((crop, index) => (
                    <Card key={crop.id} className="border-0 shadow-medium bg-white/90 backdrop-blur-sm">
                      <CardContent className="p-6">
                        <div className="flex items-start gap-4">
                          <div className="text-4xl">{crop.image}</div>
                          <div className="flex-1">
                            <div className="flex items-center gap-3 mb-2">
                              <h3 className="text-xl font-poppins font-bold text-forest-500">{crop.nameNative}</h3>
                              <Badge variant="outline" className="bg-success/10 text-success border-success/20">
                                {crop.suitability}% {language === 'hi' ? '‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§' : language === 'pa' ? '‡®â‡®™‡®Ø‡©Å‡®ï‡®§' : 'Suitable'}
              </Badge>
            </div>

                            <p className="text-muted-foreground font-inter mb-4">{crop.description}</p>
                            
                            <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 mb-4">
                              <div className="text-center p-3 bg-sky-50 rounded-lg">
                                <Calendar className="w-5 h-5 mx-auto mb-1 text-sky-600" />
                                <div className="text-sm font-inter font-medium text-sky-700">{crop.season}</div>
                                <div className="text-xs text-sky-600">{language === 'hi' ? '‡§Æ‡•å‡§∏‡§Æ' : language === 'pa' ? '‡®Æ‡©å‡®∏‡®Æ' : 'Season'}</div>
                              </div>
                              <div className="text-center p-3 bg-harvest-50 rounded-lg">
                                <Clock className="w-5 h-5 mx-auto mb-1 text-harvest-600" />
                                <div className="text-sm font-inter font-medium text-harvest-700">{crop.duration}</div>
                                <div className="text-xs text-harvest-600">{language === 'hi' ? '‡§Ö‡§µ‡§ß‡§ø' : language === 'pa' ? '‡®Ö‡®µ‡®ß‡©Ä' : 'Duration'}</div>
                </div>
                              <div className="text-center p-3 bg-forest-50 rounded-lg">
                                <TrendingUp className="w-5 h-5 mx-auto mb-1 text-forest-600" />
                                <div className="text-sm font-inter font-medium text-forest-700">{crop.yield}</div>
                                <div className="text-xs text-forest-600">{language === 'hi' ? '‡§™‡•à‡§¶‡§æ‡§µ‡§æ‡§∞' : language === 'pa' ? '‡®™‡©à‡®¶‡®æ‡®µ‡®æ‡®∞' : 'Yield'}</div>
                </div>
                              <div className="text-center p-3 bg-soil-50 rounded-lg">
                                <DollarSign className="w-5 h-5 mx-auto mb-1 text-soil-600" />
                                <div className="text-sm font-inter font-medium text-soil-700">{crop.price}</div>
                                <div className="text-xs text-soil-600">{language === 'hi' ? '‡§≠‡§æ‡§µ' : language === 'pa' ? '‡®≠‡®æ‡®Ö' : 'Price'}</div>
              </div>
            </div>

                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                                <h4 className="font-poppins font-semibold text-sm text-foreground mb-2 flex items-center gap-2">
                                  <Info className="w-4 h-4 text-sky-600" />
                                  {language === 'hi' ? '‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§è‡§Ç' : language === 'pa' ? '‡®≤‡©ã‡©ú‡®æ‡®Ç' : 'Requirements'}
                </h4>
                                <ul className="space-y-1">
                                  {crop.requirements.map((req, i) => (
                                    <li key={i} className="text-sm text-muted-foreground font-inter flex items-center gap-2">
                                      <div className="w-1.5 h-1.5 bg-sky-500 rounded-full" />
                                      {req}
                    </li>
                  ))}
                </ul>
              </div>
              <div>
                                <h4 className="font-poppins font-semibold text-sm text-foreground mb-2 flex items-center gap-2">
                                  <Star className="w-4 h-4 text-harvest-600" />
                                  {language === 'hi' ? '‡§≤‡§æ‡§≠' : language === 'pa' ? '‡®≤‡®æ‡®≠' : 'Benefits'}
                </h4>
                                <ul className="space-y-1">
                                  {crop.benefits.map((benefit, i) => (
                                    <li key={i} className="text-sm text-muted-foreground font-inter flex items-center gap-2">
                                      <div className="w-1.5 h-1.5 bg-harvest-500 rounded-full" />
                                      {benefit}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            )}
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-sky-50 via-background to-forest-50">
      {/* Header */}
      <div className="bg-gradient-field text-white p-4 shadow-medium">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Button
              variant="outline"
              size="sm"
              onClick={handleBack}
              className="bg-white/20 hover:bg-white/30 border-white/30 text-white"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              {language === 'hi' ? '‡§µ‡§æ‡§™‡§∏' : language === 'pa' ? '‡®µ‡®æ‡®™‡®∏' : 'Back'}
            </Button>
            <div>
              <h1 className="text-lg font-poppins font-bold">
                {language === 'hi' ? '‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ' : language === 'pa' ? '‡®´‡®∏‡®≤ ‡®∏‡©Å‡®ù‡®æ‡®Ö' : 'Crop Recommendation'}
              </h1>
              <p className="text-sm opacity-90 font-inter">
                {language === 'hi' ? '‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§´‡§∏‡§≤ ‡§ö‡§Ø‡§®' : language === 'pa' ? '‡®∏‡®Æ‡®æ‡®∞‡®ü ‡®´‡®∏‡®≤ ‡®ö‡®Ø‡®®' : 'Smart Crop Selection'}
              </p>
            </div>
          </div>
          <div className="text-right">
            <div className="text-sm font-inter opacity-90">
              {language === 'hi' ? '‡§ö‡§∞‡§£' : language === 'pa' ? '‡®ï‡®¶‡®Æ' : 'Step'} {currentStep}/4
            </div>
            <Progress value={(currentStep / 4) * 100} className="w-24 mt-1" />
          </div>
        </div>
      </div>

      {/* Progress Steps */}
      <div className="bg-white/80 backdrop-blur-sm border-b border-forest-100 p-4">
        <div className="flex justify-between max-w-4xl mx-auto">
          {steps.map((step) => (
            <div key={step.id} className="flex items-center gap-2">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-poppins font-semibold ${
                currentStep >= step.id 
                  ? 'bg-gradient-field text-white' 
                  : 'bg-muted text-muted-foreground'
              }`}>
                {step.id}
              </div>
              <span className={`text-sm font-inter ${
                currentStep >= step.id ? 'text-forest-600 font-medium' : 'text-muted-foreground'
              }`}>
                {step.title}
              </span>
            </div>
          ))}
        </div>
      </div>

      {/* Main Content */}
      <div className="p-4">
        <div className="max-w-4xl mx-auto">
          <Card className="border-0 shadow-medium bg-white/90 backdrop-blur-sm">
            <CardContent className="p-6">
              {getStepContent()}
            </CardContent>
        </Card>

          {/* Navigation */}
          <div className="flex justify-between mt-6">
            <Button
              variant="outline"
              onClick={handleBack}
              className="font-inter"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              {currentStep === 1 ? 
                (language === 'hi' ? '‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç' : language === 'pa' ? '‡®µ‡®æ‡®™‡®∏ ‡®ú‡®æ‡®ì' : 'Go Back') :
                (language === 'hi' ? '‡§™‡§ø‡§õ‡§≤‡§æ' : language === 'pa' ? '‡®™‡®ø‡®õ‡®≤‡®æ' : 'Previous')
              }
            </Button>
            
            {currentStep < 4 && (
              <Button
                onClick={handleNext}
                disabled={!formData.location || !formData.soilType || !formData.season}
                className="bg-gradient-field text-white hover:shadow-medium font-inter"
              >
                {language === 'hi' ? '‡§Ö‡§ó‡§≤‡§æ' : language === 'pa' ? '‡®Ö‡®ó‡®≤‡®æ' : 'Next'}
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            )}
            
            {currentStep === 4 && !isAnalyzing && (
              <Button
                onClick={() => setCurrentStep(1)}
                className="bg-gradient-field text-white hover:shadow-medium font-inter"
              >
                <RotateCcw className="w-4 h-4 mr-2" />
                {language === 'hi' ? '‡§´‡§ø‡§∞ ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç' : language === 'pa' ? '‡®´‡®ø‡®∞ ‡®∏‡®º‡©Å‡®∞‡©Ç ‡®ï‡®∞‡©ã' : 'Start Again'}
              </Button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default CropRecommendation;